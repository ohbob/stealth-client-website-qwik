{"_entry":"c","_objs":["CheckLOS","\u00062023-07-18T18:56:30.897Z","\u0001",[],"Vizit0r",false,{},"\n# {title}\n\nCheck LineOfSight-LOS between 2 point.\n\nParams:\n* xf, yf, zf - source point,\n* xt, yt, zt - dest point,\n* WorldNum - number of World (can be obtained by using WorldNum method)\n* LOSCheckType  - **Python-only** :  expected type of emulator - \"Sphere\", \"SphereAdv\",\"Pol\" or \"RunUO\"\n* LOSOptions   - **Python-only** :  set of options. Can be : \"SphereCheckCorners\", \"PolUseNoShoot\", \"PolLosThroughWindow\" or None.\n\n## Pascal ##\n\n```pascal\nfunction CheckLOS(xf : Integer; yf : Integer; zf : Integer; xt : Integer; yt : Integer; zt : Integer; WorldNum : Byte) : Boolean;\n```\nLOSOptions setted by PS variable, named \"LOSOptions\". Its not a parameter of this method!\n\nLOSOptions MUST BE set before calling CheckLOS!\n\n\nLOSOptions value can be:\n\nlosTypeSphere = 1;\n\nlosTypeSphereAdv = 2;\n\nlosTypeRunUO = 3;\n\nlosTypePOL = 4;\n\n\nand modifiers:\n\nlosSphereCheckCorners = 256; //actual only for Sphere\n\nlosPolUseNoShoot= 512; //actual only for POL\n\nlosPolLOSThroughWindow = 1024; //actual only for POL\n\n\nExample:\n```pascal\nbegin\nLOSOptions := losTypePOL OR losPolUseNoShoot;\nCheckLOS(GetX(Self),GetY(Self),GetZ(Self),GetX(Self)+10,GetY(Self)+10,GetZ(Self),WorldNum);\nend.\n```\n\n## Python\n\n```python\nCheckLOS(xf, yf, zf, xt, yt, zt, WorldNum, LOSCheckType, LOSOptions=None) -> Boolean\n```\n\n\nExample Python\n\n```python\nCheckLOS(GetX(Self),GetY(Self),GetZ(Self),GetX(Self)+10,GetY(Self)+10,GetZ(Self),WorldNum, \"Pol\", {\"PolUseNoShoot\", \"PolLosThroughWindow\"});\n```\n",{"id":"0","slug":"0","publishDate":"1","updateDate":"2","title":"0","excerpt":"2","image":"2","category":"2","tags":"3","author":"4","draft":"5","metadata":"6","content":"7"},{"c7OakCyFxmI":"8"},200,"/docs/CheckLOS/",{"loaders":"9","action":"2","status":"a","href":"b"}]}